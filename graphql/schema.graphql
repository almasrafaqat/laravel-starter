"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    plans: [Plan!]! @all
    plan(id: ID!): Plan @find
    companies: [Company!]! @all
    company(id: ID!): Company @find

    "Get the authenticated user's company and its plans"
    myCompany: Company
        @field(resolver: "App\\GraphQL\\Queries\\CompanyQuery@myCompany")

    myCompanies: [Company!]!
        @field(resolver: "App\\GraphQL\\Queries\\CompanyQuery@myCompanies")

    me: User @auth

    invoice(id: ID!): Invoice @find
    invoices(company_id: ID): [Invoice!]! @paginate(defaultCount: 10)
}

type Plan {
    id: ID!
    name: String!
    description: String
    price: Float
    billing_cycle: String
    is_active: Boolean
    is_default: Boolean
    max_users: Int
    max_projects: Int
    features: String
    currency: String
    duration_days: Int
    metas: [PlanMeta!]! @hasMany
}

type PlanMeta {
    id: ID!
    plan_id: ID!
    meta_key: String!
    meta_value: String
    meta_data: JSON
    is_active: Boolean
    is_default: Boolean
    meta_order: Int
    meta_group: String
    meta_type: String
    plan: Plan! @belongsTo
}

"Account of a person who uses this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    language: String

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    companies: [Company!]! @belongsToMany
}

type Company {
    id: ID!
    name: String!
    email: String
    phone: String
    address: String
    country: String
    language: String
    currency: String
    is_active: Boolean
    is_default: Boolean
    plans: [Plan!]! @belongsToMany
    users: [User!]! @belongsToMany
    metas: [CompanyMeta!]! @hasMany
    invoices: [Invoice!]! @hasMany
}

type CompanyMeta {
    id: ID!
    company_id: ID!
    meta_key: String!
    meta_value: String
    meta_data: JSON
    is_active: Boolean
    is_default: Boolean
    meta_order: Int
    meta_group: String
    meta_type: String
    company: Company! @belongsTo
}

type Invoice {
    id: ID!
    title: String
    invoice_number: String
    customer: Customer @belongsTo
    company: Company @belongsTo
    creator: User @belongsTo
    items: [Item!]! @hasMany
    discounts: [Discount!]! @morphMany
    reminders: [Reminder!]! @morphMany
    links: [Link!]! @morphMany
    charities: [Charity!]! @hasMany
    checklistables: [Checklistable!]! @morphMany
    
}

type Customer {
    id: ID!
    name: String!
    email: String
    phone: String
    address: String
    country: String
}
type Item {
    id: ID!
    invoice_id: ID!
    name: String!
    description: String!
    quantity: Int!
    price: Float!
    total: Float!
    invoice: Invoice! @belongsTo
}
type Discount {
    id: ID!
    discountable_id: ID!
    discountable_type: String!
    discount_type: String!
    discount: Float!
}
type Reminder {
    id: ID!
    remindable_id: ID!
    remindable_type: String!
    schedule_date: DateTime
    timezone: String
    message: String
}
type Link {
    id: ID!
    linkable_id: ID!
    linkable_type: String!
    link: String!
    is_active: Boolean!
    expires_at: DateTime
    linkable: JSON
}
type Charity {
    id: ID!
    invoice_id: ID!
    cause_name: String!
    value: Float!
    invoice: Invoice! @belongsTo
}
type Checklistable {
    id: ID!
    checklistable_id: ID!
    checklistable_type: String!
    title: String!
    is_completed: Boolean!
    checklist: Checklist @belongsTo
}
type Checklist {
    id: ID!
    title: String!
    slug: String
    description: String
    category_id: ID
    is_active: Boolean
    order: Int
    category: Category @belongsTo
}

type Mutation {
    createInvoice(input: CreateInvoiceInput!): Invoice
        @field(
            resolver: "App\\GraphQL\\Mutations\\InvoiceMutation@createInvoice"
        )
}

input CreateInvoiceInput {
    title: String!
    customer_name: String
    customer_email: String
    discount_type: String
    discount: Float
    # invoice_number: String
    # customer_id: ID
    # company_id: ID
    # creator_id: ID
    # items: [InvoiceItemInput!]
    # discounts: [InvoiceDiscountInput!]
    # reminders: [InvoiceReminderInput!]
    # links: [InvoiceLinkInput!]
    # charities: [InvoiceCharityInput!]
    # checklistables: [InvoiceChecklistableInput!]
}

input InvoiceItemInput {
    name: String!
    description: String!
    quantity: Int!
    price: Float!
}

input InvoiceDiscountInput {
    discount_type: String!
    discount: Float!
}

input InvoiceReminderInput {
    schedule_date: DateTime
    timezone: String
    message: String
}

input InvoiceLinkInput {
    link: String!
    is_active: Boolean!
    expires_at: DateTime
}

input InvoiceCharityInput {
    cause_name: String!
    value: Float!
}

input InvoiceChecklistableInput {
    checklist_id: ID!
    title: String!
    is_completed: Boolean!
}

# type Mutation {
#     createCompany(
#         name: String!
#         email: String
#         phone: String
#         address: String
#         country: String
#         language: String
#         currency: String
#     ): Company @create

#   createInvoice(
#     customer_id: ID!
#     company_id: ID!
#     items: [InvoiceItemInput!]!
#     discounts: [InvoiceDiscountInput!]
#     due_date: DateTime
#     template_id: ID
#   ): Invoice @create

#   sendInvoice(id: ID!): Invoice @field(resolver: "App\\GraphQL\\Mutations\\InvoiceMutation@sendInvoice")
#   remindInvoice(id: ID!): InvoiceReminder @field(resolver: "App\\GraphQL\\Mutations\\InvoiceMutation@remindInvoice")
#   downloadInvoice(id: ID!): String @field(resolver: "App\\GraphQL\\Mutations\\InvoiceMutation@downloadInvoice")
#   // ...other mutations
# }

# input InvoiceItemInput {
#   description: String!
#   quantity: Int!
#   price: Float!
# }

# input InvoiceDiscountInput {
#   type: String!
#   value: Float!
# }
